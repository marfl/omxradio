


// Original code: https://github.com/rikkertkoppes/omxcontrol

// Modified by djazz / daniel-j to suit needs.
// Modified by marfl to suit needs.



var child_process = require('child_process');
var exec = child_process.exec;
var spawn = child_process.spawn;
var parseurl = require('url');

var pipe = false;

var omx = {};
var isPlaying = true;
var wasKilled = false;

var out = 'local';

exec('killall omxplayer.bin');

omx.start = function(file, started) {
	if (!pipe) {
		pipe = 'omxcontrol';
		wasKilled = false;
		isPlaying = true;
		exec('mkfifo '+pipe, cb);
		//console.log('making pipe..');
	} else {
		console.log("Pipe already exists! Restarting...");
		omx.stop(function () {
			omx.start(file, started);
		});
	}
	function cb() {
		var cmd = 'omxplayer -o '+out+' "'+file+'" < '+pipe;
		console.log("Exec:", cmd.substr(0, 80));
		exec(cmd, function (error, stdout, stderr) {
			//console.log(error, stdout, stderr);
			omx.onstop(wasKilled, stdout);
			isPlaying = false;
		});
		
		
		exec('echo . > '+pipe, started);
	}
};

omx.sendKey = function(key, cb) {
	if (!pipe) return;
	exec('echo -n '+key+' > '+pipe, cb);
};

omx.mapKey = function(command,key,then) {
	omx[command] = function(cb) {
		omx.sendKey(key, function () {
			if (then) {
				then(cb);
			} else if (cb) {
				cb();
			}
		});
		
	};
};

omx.stop = function(cb) {
	if (!pipe) {
		cb();
		return;
	}
	console.log('killing omxplayer..');
	wasKilled = true;
	exec('rm '+pipe, function () {
		pipe = false;

		exec('killall omxplayer.bin', cb);
		
	});
};

omx.setAudioOut = function (newout) {

        if(newout == 'hdmi') {
                out = 'hdmi';
        } else {
                out = 'local';
        }
}

omx.onstop = function () {};


omx.mapKey('quit','q',function() {
	omx.stop();
});
omx.mapKey('play','.');
omx.mapKey('pause','p');
//omx.mapKey('forward',"$'\\x1b\\x5b\\x43'");
//omx.mapKey('backward',"$'\\x1b\\x5b\\x44'");
omx.mapKey('backward', "\x5b\x44");
omx.mapKey('forward', "\x5b\x43");

omx.mapKey('volume_up', '+');
omx.mapKey('volume_down', '-');

module.exports = omx;
